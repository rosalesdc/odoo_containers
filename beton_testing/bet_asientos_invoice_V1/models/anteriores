Asientos contables.py
# -*- coding: utf-8 -*-
from odoo import _
from odoo import api
from odoo import fields
from odoo import models
from odoo import tools
import odoo.addons.decimal_precision as dp
from odoo.exceptions import UserError
from odoo.http import request
from odoo.tools import float_is_zero

class asientosContables(models.Model):
    _inherit = 'account.invoice'
        
    #cada factura se relaciona con un asiento
    asiento_ids = fields.Many2many('account.move', string='Asientos')
        
    def _prepare_asientos(self,monto_impuesto):
        """
        Prepara el diccionario de datos para crear el nuevo asiento
	"""
        return {
            'ref':self.number
            ,'journal_id':'3'#Checar a qué diario se debe hacer referencia
            ,'amount':monto_impuesto
            #,'partner_id':self.partner_id
		}
    
    @api.multi
    def action_crear_asientos(self,monto_iva,empresa):
        asiento_obj = self.env['account.move']
        #asientos = {}
        #references = {}
#        for facturas in self: 
#            for line in facturas.tax_line_ids:
#                asiento_data=facturas._prepare_asientos(monto_iva)
#                print('haciendo algo')
#                asiento_contable = asiento_obj.create(asiento_data)
        for facturas in self: 
            asiento_data=facturas._prepare_asientos(monto_iva)
            print('haciendo algo')
            asiento_contable = asiento_obj.create(asiento_data) #regresa un objeto account_move
            print(type(asiento_contable))
            
            linea_obj=asiento_contable.env['account.move.line']
            print(type(linea_obj))
            linea_asiento=linea_obj.asiento_lines_create(asiento_contable.id,empresa,monto_iva)
            print(asiento_contable.partner_id.name)
            #linea_asiento=linea_obj.asiento_lines_create(asiento_contable.id,asiento_contable.partner_id,monto_iva)
            
            
class asientosLines(models.Model):
    _inherit = 'account.move.line'    
    
    @api.multi
    def asiento_lines_create(self, asiento_id, empresa, debe_haber):
	"""
        Crea las líneas para los asientos contables
	"""
        vals_debe={
        'move_id':asiento_id
        ,'account_id':12
        ,'partner_id':empresa
        ,'name':'118.01 IVA acreditable pagado'
        ,'debit':debe_haber
        ,'date_maturity':'06-12-2018'
        }
        vals_haber={
        'move_id':asiento_id
        ,'account_id':13
        ,'partner_id':empresa
        ,'name':'119.01 IVA pendiente de pago'
        ,'credit':debe_haber
        ,'date_maturity':'06-12-2018'
        }
        self.create(vals_debe)
	self.create(vals_haber)
        #self.env['account.invoice.line'].create(vals_debe)
        #self.env['account.invoice.line'].create(vals_haber)

    
#NOTAS
#CODIGO         NOMBRE                  ID  ETIQUETA
#118.01.01	IVA acreditable pagado	12  118.01 IVA acreditable pagado
#119.01.01	IVA pendiente de pago	13  119.01 IVA pendiente de pago
#################################################################################
wizard asientos invoice.py
# -*- coding: utf-8 -*-

from odoo import api
from odoo import exceptions
from odoo import fields
from odoo import models

class Wizard_Asientos_Invoice(models.TransientModel):
    
    _name = 'wizard_asientos_invoice'	#cuando se utiliza este modelo se manejan los registros provistos por TransientModel

    def default_invoices(self):
        return self.env['account.invoice'].browse(self._context.get('active_id'))

    def procesar_asientos(self):
        facturas_sin_impuesto=False
        facturas_todas = self.env['account.invoice'].browse(self._context.get('active_ids', []))
#        for record in self.invoices_ids:
#            print('REFERENCIA:', str(record.number))
#            print('FECHA:', str(record.date))
#            print('EMPRESA:', str(record.partner_id.name))
#            print('LINEAS TAX:::')
#            for line in record.tax_line_ids:
#                print('IMPUESTO: '+str(line.name))
#                print('IMPORTE: '+str(line.amount))
#                print('CUENTA: '+str(line.account_id.name))
        monto_impuesto=-1
        for facturas in facturas_todas:
            print('desde facturas todas: '+str(facturas.number))
            print(type(facturas))
            ##Verificacion todas las
            empresa=facturas.partner_id.id
            for lines in facturas.tax_line_ids:
                print('Impuesto: '+str(lines.name))
                print('Importe: '+str(lines.amount))
                print('Cuenta: '+str(lines.account_id.name)+'ID cuenta: '+str(lines.account_id.id))
                if lines.account_id.id==13:
                    monto_impuesto=lines.amount
                    
            facturas.action_crear_asientos(monto_impuesto,empresa)

    invoices_ids = fields.Many2many('account.invoice', string='Facturas', default=default_invoices)
